name: CHANGELOG ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏

on:
  pull_request:
    types: [opened, synchronize]
    branches: ["main"]

permissions:
  contents: write
  pull-requests: write

jobs:
  update-changelog:
    name: CHANGELOG.json ÏóÖÎç∞Ïù¥Ìä∏
    runs-on: ubuntu-latest

    steps:
      - name: Ï†ÄÏû•ÏÜå Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: develop

      - name: Git ÏÑ§Ï†ï Î∞è ÏµúÏã† ÏÉÅÌÉú ÎèôÍ∏∞Ìôî
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin develop

      - name: ÌòÑÏû¨ Î≤ÑÏ†Ñ ÌôïÏù∏
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '"version":' Wit/app.json | sed 's/.*"version": "\([^"]*\)".*/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "ÌòÑÏû¨ Î≤ÑÏ†Ñ: $CURRENT_VERSION"

      - name: ÏÉà Î≤ÑÏ†Ñ Í≥ÑÏÇ∞ (patch Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä)
        id: version
        run: |
          VERSION="${{ steps.current_version.outputs.current_version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "ÏÉà Î≤ÑÏ†Ñ: $NEW_VERSION"

      - name: app.json ÏóÖÎç∞Ïù¥Ìä∏
        run: |
          sed -i 's/"version": "[^"]*"/"version": "'${{ steps.version.outputs.new_version }}'"/' Wit/app.json
          echo "app.json ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: ${{ steps.version.outputs.new_version }}"

      - name: CodeRabbit Summary ÏóÖÎç∞Ïù¥Ìä∏ Í∞êÏßÄ (Ïä§ÎßàÌä∏ Ìè¥ÎßÅ)
        id: detect_summary
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          VERSION="${{ steps.version.outputs.new_version }}"
          TODAY=$(date '+%Y-%m-%d')
          MAX_ATTEMPTS=120
          ATTEMPT=0
          echo "üîç PR #$PR_NUMBERÏóêÏÑú CodeRabbit Summary ÏóÖÎç∞Ïù¥Ìä∏ Í∞êÏßÄ ÏãúÏûë..."
          echo "ÏµúÎåÄ ÎåÄÍ∏∞ ÏãúÍ∞Ñ: 10Î∂Ñ (5Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨)"
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "[$ATTEMPT/$MAX_ATTEMPTS] CodeRabbit Summary ÌôïÏù∏ Ï§ë... ($(date '+%H:%M:%S'))"
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.html" \
                 "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" \
                 > pr_content.html
            if grep -q "No description provided" pr_content.html; then
              echo "‚ùå ÏïÑÏßÅ 'No description provided' ÏÉÅÌÉúÏûÖÎãàÎã§"
            elif grep -q "Summary by CodeRabbit" pr_content.html; then
              echo "‚úÖ CodeRabbit Summary Î∞úÍ≤¨! ÌååÏã±ÏùÑ ÏãúÏûëÌï©ÎãàÎã§"
              echo "SUMMARY_FOUND=true" >> $GITHUB_ENV
              break
            else
              echo "‚è≥ CodeRabbit Summary ÏïÑÏßÅ ÏóÜÏùå"
            fi
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              sleep 5
            fi
          done
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "‚ö†Ô∏è 10Î∂Ñ ÎåÄÍ∏∞ ÌõÑÏóêÎèÑ CodeRabbit SummaryÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§"
            echo "SUMMARY_FOUND=false" >> $GITHUB_ENV
          fi

      - name: ÎèôÏ†Å Summary ÌååÏã± Î∞è CHANGELOG.json ÏóÖÎç∞Ïù¥Ìä∏
        if: env.SUMMARY_FOUND == 'true'
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          VERSION="${{ steps.version.outputs.new_version }}"
          TODAY=$(date '+%Y-%m-%d')
          TIMESTAMP=$(date '+%Y-%m-%dT%H:%M:%SZ')
          echo "üìù CodeRabbit Summary ÎèôÏ†Å ÌååÏã± ÏãúÏûë..."
          sed -n '/<h2[^>]*>Summary by CodeRabbit<\/h2>/,/<\/div>/p' pr_content.html > summary_section.html
          echo "üìÑ Ï∂îÏ∂úÎêú Summary ÏÑπÏÖò ÌÅ¨Í∏∞: $(wc -c < summary_section.html) bytes"
          if [ $(wc -c < summary_section.html) -lt 100 ]; then
            echo "‚ö†Ô∏è Summary ÏÑπÏÖòÏù¥ ÎÑàÎ¨¥ ÏûëÏäµÎãàÎã§. Ï†ÑÏ≤¥ PR ÎÇ¥Ïö©ÏóêÏÑú Îã§Ïãú Ï∂îÏ∂ú ÏãúÎèÑ..."
            grep -A 50 "Summary by CodeRabbit" pr_content.html > summary_section.html
          fi
          cat summary_section.html | sed 's/<[^>]*>//g' | sed 's/&nbsp;/ /g; s/&amp;/\&/g; s/&lt;/</g; s/&gt;/>/g; s/&quot;/"/g' > raw_summary.txt
          cat > parse_changelog.py << 'EOF'
          import re
          import json
          import html
          import sys
          import os
          from datetime import datetime

          def extract_items_from_section(html_content, section_title):
              patterns = [
                  f'<strong[^>]*>{re.escape(section_title)}[^<]*</strong>',
                  f'<li[^>]*><strong[^>]*>{re.escape(section_title)}[^<]*</strong>',
                  f'<p[^>]*><strong[^>]*>{re.escape(section_title)}[^<]*</strong></p>'
              ]
              section_match = None
              for pattern in patterns:
                  section_match = re.search(pattern, html_content, re.IGNORECASE)
                  if section_match:
                      break
              if not section_match:
                  return []
              after_section = html_content[section_match.end():]
              ul_match = re.search(r'<ul[^>]*>(.*?)</ul>', after_section, re.DOTALL)
              if not ul_match:
                  return []
              ul_content = ul_match.group(1)
              li_items = re.findall(r'<li[^>]*>(.*?)</li>', ul_content, re.DOTALL)
              items = []
              for item in li_items:
                  clean_text = re.sub(r'<[^>]*>', '', item)
                  clean_text = html.unescape(clean_text).strip()
                  if clean_text:
                      items.append(clean_text)
              return items

          def detect_categories(html_content):
              detected_categories = {}
              strong_texts = re.findall(r'<strong[^>]*>([^<]+)</strong>', html_content, re.IGNORECASE)
              for strong_text in strong_texts:
                  clean_text = strong_text.strip()
                  items = extract_items_from_section(html_content, clean_text)
                  if items:
                      safe_key = re.sub(r'[^a-zA-Z0-9Í∞Ä-Ìû£]', '_', clean_text.lower()).strip('_')
                      if not safe_key:
                          safe_key = f"category_{len(detected_categories)}"
                      detected_categories[safe_key] = {
                          'title': clean_text,
                          'items': items
                      }
              return detected_categories

          def main():
              version = os.environ.get('VERSION')
              today = os.environ.get('TODAY')
              pr_number = int(os.environ.get('PR_NUMBER'))
              timestamp = os.environ.get('TIMESTAMP')
              try:
                  with open('summary_section.html', 'r', encoding='utf-8') as f:
                      html_content = f.read()
                  categories = detect_categories(html_content)
                  with open('raw_summary.txt', 'r', encoding='utf-8') as f:
                      raw_summary = f.read().strip()
                  new_release = {
                      "version": version,
                      "date": today,
                      "pr_number": pr_number,
                      "raw_summary": raw_summary,
                      "parsed_changes": {}
                  }
                  for key, value in categories.items():
                      new_release["parsed_changes"][key] = value["items"]
                  try:
                      with open('Wit/CHANGELOG.json', 'r', encoding='utf-8') as f:
                          changelog_data = json.load(f)
                  except (FileNotFoundError, json.JSONDecodeError):
                      changelog_data = {
                          "metadata": {
                              "lastUpdated": timestamp,
                              "currentVersion": version,
                              "totalReleases": 0
                          },
                          "releases": []
                      }
                  changelog_data["metadata"]["lastUpdated"] = timestamp
                  changelog_data["metadata"]["currentVersion"] = version
                  changelog_data["metadata"]["totalReleases"] = len(changelog_data["releases"]) + 1
                  changelog_data["releases"].insert(0, new_release)
                  with open('Wit/CHANGELOG.json', 'w', encoding='utf-8') as f:
                      json.dump(changelog_data, f, indent=2, ensure_ascii=False)
              except Exception as e:
                  print(f"‚ùå ÌååÏã± Ïò§Î•ò: {e}")
                  sys.exit(1)
          if __name__ == "__main__":
              main()
          EOF
          export VERSION="$VERSION"
          export TODAY="$TODAY"
          export PR_NUMBER="$PR_NUMBER"
          export TIMESTAMP="$TIMESTAMP"
          python3 parse_changelog.py

      - name: CHANGELOG.md Ïû¨ÏÉùÏÑ±
        if: env.SUMMARY_FOUND == 'true'
        run: |
          echo "üìÑ CHANGELOG.jsonÏóêÏÑú CHANGELOG.md Ïû¨ÏÉùÏÑ± Ï§ë..."
          python3 << 'PYTHON_SCRIPT'
          import json
          try:
              with open('Wit/CHANGELOG.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              with open('Wit/CHANGELOG.md', 'w', encoding='utf-8') as f:
                  f.write("# Changelog\n\n")
                  for release in data['releases']:
                      f.write(f"## [{release['version']}] - {release['date']}\n\n")
                      for category_key, items in release['parsed_changes'].items():
                          if items:
                              title = category_key.replace('_', ' ').title()
                              if isinstance(items, dict) and 'title' in items:
                                  title = items['title']
                                  actual_items = items['items']
                              else:
                                  actual_items = items
                              f.write(f"**{title}**\n")
                              for item in actual_items:
                                  f.write(f"- {item}\n")
                              f.write("\n")
                      f.write("---\n\n")
              print("‚úÖ CHANGELOG.md Ïû¨ÏÉùÏÑ± ÏôÑÎ£å!")
          except Exception as e:
              print(f"‚ùå CHANGELOG.md ÏÉùÏÑ± Ïã§Ìå®: {e}")
              exit(1)
          PYTHON_SCRIPT

      - name: Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã Î∞è Ìë∏Ïãú
        if: env.SUMMARY_FOUND == 'true'
        run: |
          git pull origin develop
          git add Wit/app.json Wit/CHANGELOG.json Wit/CHANGELOG.md
          if git diff --staged --quiet; then
            echo "üìù Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§"
          else
            git commit -m "Wit Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ : chore: Î≤ÑÏ†Ñ ${{ steps.version.outputs.new_version }} (PR #${{ github.event.pull_request.number }})"
            git push origin develop
            echo "‚úÖ Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïª§Î∞ãÎêòÏóàÏäµÎãàÎã§"
          fi

      - name: ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å ÏïåÎ¶º
        run: |
          if [ "${{ env.SUMMARY_FOUND }}" == "true" ]; then
            echo "‚úÖ CHANGELOG ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!"
            echo "üì¶ ÏÉà Î≤ÑÏ†Ñ: ${{ steps.version.outputs.new_version }}"
            echo "üîó PR: #${{ github.event.pull_request.number }}"
            echo "üìÑ Wit/app.json, Wit/CHANGELOG.json Î∞è Wit/CHANGELOG.mdÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§"
            echo "üéØ ÎèôÏ†Å Ïπ¥ÌÖåÍ≥†Î¶¨ ÌååÏã±ÏúºÎ°ú AI ÏÉùÏÑ± ÏΩòÌÖêÏ∏† Ïú†Ïó∞ÌïòÍ≤å Ï≤òÎ¶¨Îê®"
          else
            echo "‚ö†Ô∏è CodeRabbit SummaryÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ ÏóÖÎç∞Ïù¥Ìä∏Î•º Í±¥ÎÑàÎõ∞ÏóàÏäµÎãàÎã§"
          fi

      - name: Ï†ïÎ¶¨
        run: |
          rm -f pr_content.html summary_section.html raw_summary.txt parse_changelog.py

      - name: ÏûêÎèô PR Merge Î∞è main Î∏åÎûúÏπò ÏóÖÎç∞Ïù¥Ìä∏
        if: env.SUMMARY_FOUND == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîÑ PR #${{ github.event.pull_request.number }} ÏûêÎèô Î®∏ÏßÄ ÏãúÎèÑ Ï§ë..."
          PR_STATE=$(gh pr view ${{ github.event.pull_request.number }} --json state,mergeable --jq '.state + "," + (.mergeable | tostring)')
          echo "PR ÏÉÅÌÉú: $PR_STATE"
          if gh pr merge ${{ github.event.pull_request.number }} --merge; then
            echo "‚úÖ PRÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î®∏ÏßÄÎêòÏóàÏäµÎãàÎã§!"
          else
            echo "‚ùå PR Î®∏ÏßÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú Ï≤òÎ¶¨Ìï¥Ï£ºÏÑ∏Ïöî."
            exit 1
          fi
          echo "üöÄ main Î∏åÎûúÏπò ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë..."
          git push origin HEAD:main --force
          echo "‚úÖ main Î∏åÎûúÏπò ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å! Î∞∞Ìè¨ ÏõåÌÅ¨ÌîåÎ°úÏö∞Í∞Ä ÏûêÎèôÏúºÎ°ú Ìä∏Î¶¨Í±∞Îê©ÎãàÎã§."
